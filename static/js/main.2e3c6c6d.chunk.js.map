{"version":3,"sources":["components/Header.js","components/NuevaCita.js","components/Cita.js","components/ListaCitas.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","className","NuevaCita","initiaState","cita","mascota","propietario","fecha","time","sintomas","error","state","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","nuevaCita","uuid","props","crearNuevaCita","this","onSubmit","htmlFor","type","placeholder","onChange","Component","Cita","eliminarCita","onClick","id","ListaCitas","citas","eliminarCitas","length","map","key","App","data","newCita","filter","citasLS","localStorage","getItem","JSON","parse","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e3c6c6d.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Header = ({title}) => (\r\n<header> \r\n    <h1 className='text-center'>{title} </h1>\r\n</header>\r\n);\r\n\r\n//Documentando el App;\r\nHeader.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport uuid from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass NuevaCita extends Component {\r\n\r\n    initiaState = {\r\n        cita: {\r\n            mascota:'',\r\n            propietario:'',\r\n            fecha:'',\r\n            time:'',\r\n            sintomas:'',\r\n        },\r\n        error: false,\r\n    };\r\n  state = this.initiaState;\r\n\r\n //Tomando los datos del formulario\r\n   handleChange = e => {\r\n     this.setState({\r\n         cita: {\r\n                ...this.state.cita,\r\n                [e.target.name]:e.target.value,\r\n\r\n         }\r\n     })\r\n  }\r\n\r\n  //Cuando se envia el formulario\r\n  handleSubmit = e => {\r\n      e.preventDefault();\r\n      \r\n      const {mascota,propietario,time,fecha,sintomas} = this.state.cita;\r\n      if(mascota === '' || propietario === '' ||time === '' ||fecha === '' ||sintomas === ''){\r\n          this.setState({\r\n              error: true,\r\n              \r\n          })\r\n          return;\r\n      }\r\n\r\n      const nuevaCita =  {...this.state.cita}\r\n      nuevaCita['id'] = uuid();\r\n\r\n      this.props.crearNuevaCita(nuevaCita);\r\n      this.setState({...this.initiaState});\r\n  }\r\n\r\n  render() {\r\n\r\n    const {error} = this.state;\r\n\r\n    return (\r\n      <div className=\"card mt-5 py-5\">\r\n        <div className=\"card-body\">\r\n          <h2 className=\"text-center\">\r\n            Llena el formulario para crear una nueva cita\r\n          </h2>\r\n        </div>\r\n        {error ? (<div className='alert alert-danger mt-2 mb-5 text-center'>Todos los campos son obligatiorios</div>): null}\r\n        <form onSubmit={this.handleSubmit} className='m-3'>\r\n          <div className=\"form-group row\">\r\n            <label\r\n              htmlFor=\"mascota\"\r\n              className=\"col-sm-4 col-lg-2 col-form-label\"\r\n            >\r\n              {\" \"}\r\n              Nombre Mascota\r\n            </label>\r\n            <div className=\"col-sm-8 col-lg-10\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Nombre Mascota\"\r\n                className=\"form-control\"\r\n                name=\"mascota\"\r\n                onChange={this.handleChange}\r\n                value={this.state.cita.mascota}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group row\">\r\n            <label className=\"col-sm-4 col-lg-2 col-form-label\">\r\n              {\" \"}\r\n              Nombre Duenno\r\n            </label>\r\n            <div className=\"col-sm-8 col-lg-10\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Duenno Mascota\"\r\n                className=\"form-control\"\r\n                name=\"propietario\"\r\n                onChange={this.handleChange}\r\n                value={this.state.cita.propietario}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"form-group row\">\r\n            <label className=\"col-sm-4 col-lg-2 col-form-label\"> Fecha</label>\r\n            <div className=\"col-sm-8 col-lg-4\">\r\n              <input\r\n               type=\"date\" \r\n               className=\"form-control\" \r\n               name=\"fecha\" \r\n               onChange={this.handleChange}\r\n               value={this.state.cita.fecha}\r\n               />\r\n            </div>\r\n          \r\n         \r\n            <label className=\"col-sm-4 col-lg-2 col-form-label\"> Hora</label>\r\n            <div className=\"col-sm-8 col-lg-4\">\r\n              <input\r\n               type=\"time\" \r\n               className=\"form-control\" \r\n               name=\"time\"\r\n               onChange={this.handleChange}\r\n               value={this.state.cita.time}\r\n               />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group row\">\r\n            <label className=\"col-sm-4 col-lg-2 col-form-label\">\r\n              {\" \"}\r\n              Sintomas\r\n            </label>\r\n            <div className=\"col-sm-8 col-lg-10\">\r\n              <textarea\r\n                type=\"text\"\r\n                placeholder=\"Describe los Sintomas\"\r\n                className=\"form-control\"\r\n                name=\"sintomas\"\r\n                onChange={this.handleChange}\r\n                value={this.state.cita.sintomas}\r\n              >\r\n              </textarea>\r\n              \r\n            </div>\r\n          </div>\r\n          <input type='submit' className='py-3 mt-2 btn btn-success btn-block' value='Nuevas Citas'/>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Documentando el componente\r\nNuevaCita.propTypes = {\r\n    crearNuevaCita: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default NuevaCita;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Cita = ({cita, eliminarCita}) => {\r\n\r\n\r\n    return (\r\n        <div className='media mt-3'>\r\n            <div className='media-body'>\r\n                <h3 className='mt-0'>{cita.mascota}</h3>\r\n                <p className='card-text'><span>Duenno:</span>{cita.propietario}</p> \r\n                <p className='card-text'><span>Fecha:</span>{cita.fecha}</p> \r\n                <p className='card-text'><span>Hora:</span>{cita.time}</p> \r\n                <p className='card-text'><span>Sintomas:</span>{cita.sintomas}</p> \r\n                <button  onClick={()=>eliminarCita(cita.id)} className='btn btn-danger' >Eliminar &times;</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nCita.propTypes = {\r\n    eliminarCita: PropTypes.func.isRequired,\r\n    cita: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default Cita;","import React from \"react\";\r\nimport Cita from \"./Cita\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ListaCitas = ({citas, eliminarCitas}) => {\r\n\r\n  \r\n\r\n  return(  \r\n  <div className='card mt-2 py-5'>\r\n      <div className='card-body'>\r\n            {citas.length !== 0 ? (<h2 className='card-title text-center'>Administra las citas aqui</h2>) :\r\n        (<h2 className='card-title text-center'>Agregar nueva cita</h2>) }\r\n            <div className='lista-citas'>\r\n                {citas && citas.map(cita => (\r\n                    <Cita eliminarCita={eliminarCitas} key={cita.id} cita={cita}/>\r\n                ))}\r\n            </div>\r\n      </div>\r\n     \r\n  </div>\r\n  )\r\n};\r\n\r\nListaCitas.propTypes = {\r\n    eliminarCitas: PropTypes.func.isRequired,\r\n    citas: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default ListaCitas;\r\n","import React, {Component} from 'react';\nimport './bootstrap.min.css';\nimport './App.css';\nimport Header from './components/Header';\nimport NuevaCita from './components/NuevaCita';\nimport ListaCitas from './components/ListaCitas';\n\nclass App extends Component {\n  state = {\n    citas: [],\n  }\n\n  crearNuevaCita = (data) => {\n   \n    this.setState({\n      citas: [...this.state.citas, data]\n    })\n  }\n\n  componentDidMount(){\n    const citasLS = localStorage.getItem('citas');\n    if(citasLS){\n      this.setState({\n        citas: JSON.parse(citasLS )\n      })\n    }\n  }\n  componentDidUpdate(){\n    localStorage.setItem( 'citas',JSON.stringify([...this.state.citas]))\n  }\n\n  //Eliminar las citas.\n  eliminarCitas = id => {\n    const newCita = this.state.citas.filter(cita => (\n      cita.id !== id\n    ))\n    this.setState({\n      citas : newCita\n    })\n  }\n\n  render(){\n    const citas = [...this.state.citas]\n    return (\n      <div className='container'>\n        <Header title='Administrador Pacientes Veterianria' />\n       <div className='row'>\n          <div className='col-md-10 mx-auto'>\n            <NuevaCita crearNuevaCita={this.crearNuevaCita}/>\n          </div>\n          <div className='mt-5 col-md-10 mx-auto'>\n                <ListaCitas eliminarCitas={this.eliminarCitas}  citas={citas}/>\n          </div>\n       </div>\n      </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}